# coding: utf-8

"""
    APIs OpenData do Open Banking Brasil

    As APIs descritas neste documento são referentes as APIs da fase OpenData do Open Banking Brasil.  # noqa: E501

    OpenAPI spec version: 1.0.0-rc5.2
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostalAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'additional_info': 'str',
        'district_name': 'str',
        'town_name': 'str',
        'ibge_code': 'str',
        'country_sub_division': 'str',
        'post_code': 'str',
        'country': 'str',
        'country_code': 'str',
        'geographic_coordinates': 'GeographicCoordinates'
    }

    attribute_map = {
        'address': 'address',
        'additional_info': 'additionalInfo',
        'district_name': 'districtName',
        'town_name': 'townName',
        'ibge_code': 'ibgeCode',
        'country_sub_division': 'countrySubDivision',
        'post_code': 'postCode',
        'country': 'country',
        'country_code': 'countryCode',
        'geographic_coordinates': 'geographicCoordinates'
    }

    def __init__(self, address=None, additional_info=None, district_name=None, town_name=None, ibge_code=None, country_sub_division=None, post_code=None, country=None, country_code=None, geographic_coordinates=None):  # noqa: E501
        """PostalAddress - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._additional_info = None
        self._district_name = None
        self._town_name = None
        self._ibge_code = None
        self._country_sub_division = None
        self._post_code = None
        self._country = None
        self._country_code = None
        self._geographic_coordinates = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if additional_info is not None:
            self.additional_info = additional_info
        if district_name is not None:
            self.district_name = district_name
        if town_name is not None:
            self.town_name = town_name
        if ibge_code is not None:
            self.ibge_code = ibge_code
        if country_sub_division is not None:
            self.country_sub_division = country_sub_division
        if post_code is not None:
            self.post_code = post_code
        if country is not None:
            self.country = country
        if country_code is not None:
            self.country_code = country_code
        if geographic_coordinates is not None:
            self.geographic_coordinates = geographic_coordinates

    @property
    def address(self):
        """Gets the address of this PostalAddress.  # noqa: E501

        Deverá trazer toda a informação referente ao endereço da dependência informada: Tipo de logradouro + Nome do logradouro + Número do Logradouro (se não existir usar ' s/n') + complemento (se houver), como, p.ex.: 'R Diamatina, 59, bloco 35, fundos' 'Praça da Boa Vontade s/n'  # noqa: E501

        :return: The address of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PostalAddress.

        Deverá trazer toda a informação referente ao endereço da dependência informada: Tipo de logradouro + Nome do logradouro + Número do Logradouro (se não existir usar ' s/n') + complemento (se houver), como, p.ex.: 'R Diamatina, 59, bloco 35, fundos' 'Praça da Boa Vontade s/n'  # noqa: E501

        :param address: The address of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def additional_info(self):
        """Gets the additional_info of this PostalAddress.  # noqa: E501

        Alguns logradouros ainda necessitam ser especificados por meio de complemento  # noqa: E501

        :return: The additional_info of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this PostalAddress.

        Alguns logradouros ainda necessitam ser especificados por meio de complemento  # noqa: E501

        :param additional_info: The additional_info of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def district_name(self):
        """Gets the district_name of this PostalAddress.  # noqa: E501

        Bairro é uma comunidade ou região localizada em uma cidade ou município de acordo com as suas subdivisões geográficas. p.ex: 'Paraíso'  # noqa: E501

        :return: The district_name of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._district_name

    @district_name.setter
    def district_name(self, district_name):
        """Sets the district_name of this PostalAddress.

        Bairro é uma comunidade ou região localizada em uma cidade ou município de acordo com as suas subdivisões geográficas. p.ex: 'Paraíso'  # noqa: E501

        :param district_name: The district_name of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._district_name = district_name

    @property
    def town_name(self):
        """Gets the town_name of this PostalAddress.  # noqa: E501

        Localidade: O nome da localidade corresponde à designação da cidade ou município no qual o endereço está localizado. p.ex. 'São Paulo'  # noqa: E501

        :return: The town_name of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._town_name

    @town_name.setter
    def town_name(self, town_name):
        """Sets the town_name of this PostalAddress.

        Localidade: O nome da localidade corresponde à designação da cidade ou município no qual o endereço está localizado. p.ex. 'São Paulo'  # noqa: E501

        :param town_name: The town_name of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._town_name = town_name

    @property
    def ibge_code(self):
        """Gets the ibge_code of this PostalAddress.  # noqa: E501

        Código IBGE do município  # noqa: E501

        :return: The ibge_code of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._ibge_code

    @ibge_code.setter
    def ibge_code(self, ibge_code):
        """Sets the ibge_code of this PostalAddress.

        Código IBGE do município  # noqa: E501

        :param ibge_code: The ibge_code of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._ibge_code = ibge_code

    @property
    def country_sub_division(self):
        """Gets the country_sub_division of this PostalAddress.  # noqa: E501

        Enumeração referente a cada sigla da unidade da federação que identifica o estado ou o distrito federal, no qual o endereço está localizado. p.ex. 'AC'. São consideradas apenas as siglas para os estados brasileiros  # noqa: E501

        :return: The country_sub_division of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_sub_division

    @country_sub_division.setter
    def country_sub_division(self, country_sub_division):
        """Sets the country_sub_division of this PostalAddress.

        Enumeração referente a cada sigla da unidade da federação que identifica o estado ou o distrito federal, no qual o endereço está localizado. p.ex. 'AC'. São consideradas apenas as siglas para os estados brasileiros  # noqa: E501

        :param country_sub_division: The country_sub_division of this PostalAddress.  # noqa: E501
        :type: str
        """
        allowed_values = ["AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"]  # noqa: E501
        if country_sub_division not in allowed_values:
            raise ValueError(
                "Invalid value for `country_sub_division` ({0}), must be one of {1}"  # noqa: E501
                .format(country_sub_division, allowed_values)
            )

        self._country_sub_division = country_sub_division

    @property
    def post_code(self):
        """Gets the post_code of this PostalAddress.  # noqa: E501

        Código de Endereçamento Postal  # noqa: E501

        :return: The post_code of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this PostalAddress.

        Código de Endereçamento Postal  # noqa: E501

        :param post_code: The post_code of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._post_code = post_code

    @property
    def country(self):
        """Gets the country of this PostalAddress.  # noqa: E501

        Nome do país  # noqa: E501

        :return: The country of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PostalAddress.

        Nome do país  # noqa: E501

        :param country: The country of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this PostalAddress.  # noqa: E501

        Código do país  # noqa: E501

        :return: The country_code of this PostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PostalAddress.

        Código do país  # noqa: E501

        :param country_code: The country_code of this PostalAddress.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def geographic_coordinates(self):
        """Gets the geographic_coordinates of this PostalAddress.  # noqa: E501


        :return: The geographic_coordinates of this PostalAddress.  # noqa: E501
        :rtype: GeographicCoordinates
        """
        return self._geographic_coordinates

    @geographic_coordinates.setter
    def geographic_coordinates(self, geographic_coordinates):
        """Sets the geographic_coordinates of this PostalAddress.


        :param geographic_coordinates: The geographic_coordinates of this PostalAddress.  # noqa: E501
        :type: GeographicCoordinates
        """

        self._geographic_coordinates = geographic_coordinates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostalAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostalAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
