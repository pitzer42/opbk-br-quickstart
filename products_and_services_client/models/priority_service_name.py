# coding: utf-8

"""
    API's OpenData do Open Banking Brasil

    As API's descritas neste documento s√£o referentes as API's da fase OpenData do Open Banking Brasil.  # noqa: E501

    OpenAPI spec version: 1.0.0-rc5.2
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PriorityServiceName(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CONFECCAO_CADASTRO_INICIO_RELACIONAMENTO = "CONFECCAO_CADASTRO_INICIO_RELACIONAMENTO"
    FORNECIMENTO_2_VIA_CARTAO_FUNCAO_DEBITO = "FORNECIMENTO_2_VIA_CARTAO_FUNCAO_DEBITO"
    FORNECIMENTO_2_VIA_CARTAO_FUNCAO_MOVIMENTACAO_CONTA_POUPANCA = "FORNECIMENTO_2_VIA_CARTAO_FUNCAO_MOVIMENTACAO_CONTA_POUPANCA"
    EXCLUSAO_CADASTRO_EMITENTES_CHEQUES_SEM_FUNDO_CCF = "EXCLUSAO_CADASTRO_EMITENTES_CHEQUES_SEM_FUNDO_CCF"
    CONTRA_ORDEM_REVOGACAO_E_OPOSICAO_OU_SUSTACAO_PAGAMENTO_CHEQUE = "CONTRA_ORDEM_REVOGACAO_E_OPOSICAO_OU_SUSTACAO_PAGAMENTO_CHEQUE"
    FORNECIMENTO_FOLHAS_CHEQUE = "FORNECIMENTO_FOLHAS_CHEQUE"
    CHEQUE_ADMINISTRATIVO = "CHEQUE_ADMINISTRATIVO"
    CHEQUE_VISADO = "CHEQUE_VISADO"
    SAQUE_CONTA_DEPOSITO_A_VISTA_POUPANCA_PRESENCIAL_OU_PESSOAL = "SAQUE_CONTA_DEPOSITO_A_VISTA_POUPANCA_PRESENCIAL_OU_PESSOAL"
    SAQUE_CONTA_DEPOSITO_A_VISTA_POUPANCA_TERMINAL_AUTOATENDIMENTO = "SAQUE_CONTA_DEPOSITO_A_VISTA_POUPANCA_TERMINAL_AUTOATENDIMENTO"
    SAQUE_CONTA_DEPOSITO_A_VISTA_POUPANCA_CORRESPONDENTES_PAIS = "SAQUE_CONTA_DEPOSITO_A_VISTA_POUPANCA_CORRESPONDENTES_PAIS"
    DEPOSITO_IDENTIFICADO = "DEPOSITO_IDENTIFICADO"
    FORNECIMENTO_EXTRATO_MENSAL_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_PRESENCIAL_OU_PESSOAL = "FORNECIMENTO_EXTRATO_MENSAL_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_PRESENCIAL_OU_PESSOAL"
    FORNECIMENTO_EXTRATO_MENSAL_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_TERMINAL_AUTOATENDIMENTO = "FORNECIMENTO_EXTRATO_MENSAL_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_TERMINAL_AUTOATENDIMENTO"
    FORNECIMENTO_EXTRATO_MENSAL_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_CORRESPONDENTES_PAIS = "FORNECIMENTO_EXTRATO_MENSAL_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_CORRESPONDENTES_PAIS"
    FORNECIMENTO_EXTRATO_DE_UM_PERIODO_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_PRESENCIAL_OU_PESSOAL = "FORNECIMENTO_EXTRATO_DE_UM_PERIODO_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_PRESENCIAL_OU_PESSOAL"
    FORNECIMENTO_EXTRATO_DE_UM_PERIODO_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_TERMINAL_AUTOATENDIMENTO = "FORNECIMENTO_EXTRATO_DE_UM_PERIODO_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_TERMINAL_AUTOATENDIMENTO"
    FORNECIMENTO_EXTRATO_DE_UM_PERIODO_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_CORRESPONDENTES_PAIS = "FORNECIMENTO_EXTRATO_DE_UM_PERIODO_CONTA_DEPOSITOS_A_VISTA_E_POUPANCA_CORRESPONDENTES_PAIS"
    FORNECIMENTO_COPIA_MICROFILME_MICROFICHA_ASSEMELHADO = "FORNECIMENTO_COPIA_MICROFILME_MICROFICHA_ASSEMELHADO"
    TRANSFERENCIA_DOC_PESSOAL_OU_PRESENCIAL = "TRANSFERENCIA_DOC_PESSOAL_OU_PRESENCIAL"
    TRANSFERENCIA_DOC_TERMINAL_AUTOATENDIMENTO_OUTROS_MEIOS_ELETRONICOS = "TRANSFERENCIA_DOC_TERMINAL_AUTOATENDIMENTO_OUTROS_MEIOS_ELETRONICOS"
    TRANSFERENCIA_DOC_INTERNET = "TRANSFERENCIA_DOC_INTERNET"
    TRANSFERENCIA_TED_PESSOAL_OU_PRESENCIAL = "TRANSFERENCIA_TED_PESSOAL_OU_PRESENCIAL"
    TRANSFERENCIA_TED_TERMINAL_AUTOATENDIMENTO_OUTROS_MEIOS_ELETRONICOS = "TRANSFERENCIA_TED_TERMINAL_AUTOATENDIMENTO_OUTROS_MEIOS_ELETRONICOS"
    TRANSFERENCIA_TED_INTERNET = "TRANSFERENCIA_TED_INTERNET"
    TRANSFERENCIA_DOC_TED_PESSOAL_OU_PRESENCIAL = "TRANSFERENCIA_DOC_TED_PESSOAL_OU_PRESENCIAL"
    TRANSFERENCIA_DOC_TED_TERMINAL_AUTOATENDIMENTO_OUTROS_MEIOS_ELETRONICOS = "TRANSFERENCIA_DOC_TED_TERMINAL_AUTOATENDIMENTO_OUTROS_MEIOS_ELETRONICOS"
    TRANSFERENCIA_DOC_TED_INTERNET = "TRANSFERENCIA_DOC_TED_INTERNET"
    TRANSFERENCIA_ENTRE_CONTAS_PROPRIA_INSTITUICAO_PESSOAL_OU_PRESENCIAL = "TRANSFERENCIA_ENTRE_CONTAS_PROPRIA_INSTITUICAO_PESSOAL_OU_PRESENCIAL"
    TRANSFERENCIA_ENTRE_CONTAS_PROPRIA_INSTITUICAO_TERMINAL_AUTOATENDIMENTO_OUTROS_MEIOS_ELETRONICOS_INCLUSIVE_INTERNET = "TRANSFERENCIA_ENTRE_CONTAS_PROPRIA_INSTITUICAO_TERMINAL_AUTOATENDIMENTO_OUTROS_MEIOS_ELETRONICOS_INCLUSIVE_INTERNET"
    ORDEM_PAGAMENTO = "ORDEM_PAGAMENTO"
    ANUIDADE_CARTAO_BASICO_NACIONAL = "ANUIDADE_CARTAO_BASICO_NACIONAL"
    ANUIDADE_CARTAO_BASICO_INTERNACIONAL = "ANUIDADE_CARTAO_BASICO_INTERNACIONAL"
    ANUIDADE_DIFERENCIADA = "ANUIDADE_DIFERENCIADA"
    UTILIZACAO_CANAIS_ATENDIMENTO_RETIRADA_ESPECIE_BRASIL = "UTILIZACAO_CANAIS_ATENDIMENTO_RETIRADA_ESPECIE_BRASIL"
    UTILIZACAO_CANAIS_ATENDIMENTO_RETIRADA_ESPECIE_EXTERIOR = "UTILIZACAO_CANAIS_ATENDIMENTO_RETIRADA_ESPECIE_EXTERIOR"
    AVALIACAO_EMERGENCIAL_CREDITO = "AVALIACAO_EMERGENCIAL_CREDITO"
    FORNECIMENTO_SEGUNDA_VIA_FUNCAO_CREDITO = "FORNECIMENTO_SEGUNDA_VIA_FUNCAO_CREDITO"
    PAGAMENTO_CONTAS_UTILIZANDO_FUNCAO_CREDITO = "PAGAMENTO_CONTAS_UTILIZANDO_FUNCAO_CREDITO"
    SMS = "SMS"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """PriorityServiceName - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PriorityServiceName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriorityServiceName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
