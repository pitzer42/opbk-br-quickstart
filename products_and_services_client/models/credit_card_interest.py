# coding: utf-8

"""
    API's OpenData do Open Banking Brasil

    As API's descritas neste documento são referentes as API's da fase OpenData do Open Banking Brasil.  # noqa: E501

    OpenAPI spec version: 1.0.0-rc5.2
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditCardInterest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rates': 'list[InterestRate]',
        'instalment_rates': 'list[InterestRate]',
        'other_credits': 'list[CreditCardInterestRate]'
    }

    attribute_map = {
        'rates': 'rates',
        'instalment_rates': 'instalmentRates',
        'other_credits': 'otherCredits'
    }

    def __init__(self, rates=None, instalment_rates=None, other_credits=None):  # noqa: E501
        """CreditCardInterest - a model defined in Swagger"""  # noqa: E501
        self._rates = None
        self._instalment_rates = None
        self._other_credits = None
        self.discriminator = None
        self.rates = rates
        self.instalment_rates = instalment_rates
        self.other_credits = other_credits

    @property
    def rates(self):
        """Gets the rates of this CreditCardInterest.  # noqa: E501

        Lista da representação que traz o conjunto de informações necessárias para demonstrar a distribuição de frequências das taxas de juros remuneratórios para crédito rotativo  # noqa: E501

        :return: The rates of this CreditCardInterest.  # noqa: E501
        :rtype: list[InterestRate]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this CreditCardInterest.

        Lista da representação que traz o conjunto de informações necessárias para demonstrar a distribuição de frequências das taxas de juros remuneratórios para crédito rotativo  # noqa: E501

        :param rates: The rates of this CreditCardInterest.  # noqa: E501
        :type: list[InterestRate]
        """
        if rates is None:
            raise ValueError("Invalid value for `rates`, must not be `None`")  # noqa: E501

        self._rates = rates

    @property
    def instalment_rates(self):
        """Gets the instalment_rates of this CreditCardInterest.  # noqa: E501

        Lista da representação que traz o conjunto de informações necessárias para demonstrar a distribuição de frequências das taxas de juros remuneratórios para parcelamento do saldo devedor  # noqa: E501

        :return: The instalment_rates of this CreditCardInterest.  # noqa: E501
        :rtype: list[InterestRate]
        """
        return self._instalment_rates

    @instalment_rates.setter
    def instalment_rates(self, instalment_rates):
        """Sets the instalment_rates of this CreditCardInterest.

        Lista da representação que traz o conjunto de informações necessárias para demonstrar a distribuição de frequências das taxas de juros remuneratórios para parcelamento do saldo devedor  # noqa: E501

        :param instalment_rates: The instalment_rates of this CreditCardInterest.  # noqa: E501
        :type: list[InterestRate]
        """
        if instalment_rates is None:
            raise ValueError("Invalid value for `instalment_rates`, must not be `None`")  # noqa: E501

        self._instalment_rates = instalment_rates

    @property
    def other_credits(self):
        """Gets the other_credits of this CreditCardInterest.  # noqa: E501

        Lista de outras operações de crédito  # noqa: E501

        :return: The other_credits of this CreditCardInterest.  # noqa: E501
        :rtype: list[CreditCardInterestRate]
        """
        return self._other_credits

    @other_credits.setter
    def other_credits(self, other_credits):
        """Sets the other_credits of this CreditCardInterest.

        Lista de outras operações de crédito  # noqa: E501

        :param other_credits: The other_credits of this CreditCardInterest.  # noqa: E501
        :type: list[CreditCardInterestRate]
        """
        if other_credits is None:
            raise ValueError("Invalid value for `other_credits`, must not be `None`")  # noqa: E501

        self._other_credits = other_credits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardInterest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardInterest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
